# please run `bazel run //practical_exercises/key_exercises:output`
# please run `bazel run //practical_exercises/key_exercises:clock`
# please run `bazel run //practical_exercises/key_exercises:read_file`
# please run `bazel run //practical_exercises/key_exercises:operator_circle`
# please run `bazel run //practical_exercises/key_exercises:io_operator`
# please run `bazel run //practical_exercises/key_exercises:stack`
# please run `bazel run //practical_exercises/key_exercises:try`
# please run `bazel run //practical_exercises/key_exercises:override`
# please run `bazel run //practical_exercises/key_exercises:io_operator_overload`
# please run `bazel run //practical_exercises/key_exercises:array_template`
# please run `bazel run //practical_exercises/key_exercises:array`
# please run `bazel run //practical_exercises/key_exercises:map_insert_look`
# please run `bazel run //practical_exercises/key_exercises:func_temp`
# please run `bazel run //practical_exercises/key_exercises:bracket_overloading`
# please run `bazel run //practical_exercises/key_exercises:operator_cast`

load("@rules_cc//cc:defs.bzl", "cc_binary")

cc_binary(
    name = "output",
    srcs = ["output.cpp"],
)
cc_binary(
    name = "clock",
    srcs = ["clock.cpp"],
)
cc_binary(
    name = "read_file",
    srcs = ["read_file.cpp"],
)
cc_binary(
    name = "operator_circle",
    srcs = ["operator_circle.cpp"],
)
cc_binary(
    name = "io_operator",
    srcs = ["io_operator.cpp"],
)
cc_binary(
    name = "stack",
    srcs = ["stack.cpp"],
)
cc_binary(
    name = "try",
    srcs = ["try.cpp"],
)
cc_binary(
    name = "override",
    srcs = ["override.cpp"],
)
cc_binary(
    name = "io_operator_overload",
    srcs = ["io_operator_overload.cpp"],
)
cc_binary(
    name = "array_template",
    srcs = ["array_template.cpp"],
)
cc_binary(
    name = "array",
    srcs = ["array.cpp"],
)
cc_binary(
    name = "map_insert_look",
    srcs = ["map_insert_look.cpp"],
)
cc_binary(
    name = "func_temp",
    srcs = ["func_temp.cpp"],
)
cc_binary(
    name = "bracket_overloading",
    srcs = ["bracket_overloading.cpp"],
)
cc_binary(
    name = "operator_cast",
    srcs = ["operator_cast.cpp"],
)
