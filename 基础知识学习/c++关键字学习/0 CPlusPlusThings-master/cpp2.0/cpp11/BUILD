#please run `bazel run //cpp2.0/cpp11:decltype`
#please run `bazel run //cpp2.0/cpp11:auto`
# please run `bazel run //cpp2.0/cpp11:override`
# please run `bazel run //cpp2.0/cpp11:tuple`
# please run `bazel run //cpp2.0/cpp11:noexcept`
# please run `bazel run //cpp2.0/cpp11:constexpr`
# please run `bazel run //cpp2.0/cpp11:nullptr`
# please run `bazel run //cpp2.0/cpp11:initializer`
# please run `bazel run //cpp2.0/cpp11:type_alias`
# please run `bazel run //cpp2.0/cpp11:hash`
# please run `bazel run //cpp2.0/cpp11:lambda`
# please run `bazel run //cpp2.0/cpp11:uniform_initialization`
# please run `bazel run //cpp2.0/cpp11:final`
# please run `bazel run //cpp2.0/cpp11:default_delete`
# please run `bazel run //cpp2.0/cpp11:move`
# please run `bazel run //cpp2.0/cpp11:alias`
# please run `bazel run //cpp2.0/cpp11:rvalue`
# please run `bazel run //cpp2.0/cpp11:template_template`
# please run `bazel run //cpp2.0/cpp11:explicit`

load("@rules_cc//cc:defs.bzl", "cc_binary")

cc_binary(
    name = "decltype",
    srcs = ["decltype.cpp"],
)
cc_binary(
    name = "auto",
    srcs = ["auto.cpp"],
)
cc_binary(
    name = "override",
    srcs = ["override.cpp"],
)
cc_binary(
    name = "tuple",
    srcs = ["tuple.cpp"],
)
cc_binary(
    name = "noexcept",
    srcs = ["noexcept.cpp"],
)
cc_binary(
    name = "constexpr",
    srcs = ["constexpr.cpp"],
)
cc_binary(
    name = "nullptr",
    srcs = ["nullptr.cpp"],
)
cc_binary(
    name = "initializer",
    srcs = ["initializer.cpp"],
)
cc_binary(
    name = "type_alias",
    srcs = ["type_alias.cpp"],
)
cc_binary(
    name = "hash",
    srcs = ["hash.cpp"],
)
cc_binary(
    name = "lambda",
    srcs = ["lambda.cpp"],
)
cc_binary(
    name = "uniform_initialization",
    srcs = ["uniform_initialization.cpp"],
)
cc_binary(
    name = "final",
    srcs = ["final.cpp"],
)
cc_binary(
    name = "default_delete",
    srcs = ["default_delete.cpp"],
)
cc_binary(
    name = "move",
    srcs = ["move.cpp"],
)
cc_binary(
    name = "alias",
    srcs = ["alias.cpp"],
)
cc_binary(
    name = "rvalue",
    srcs = ["rvalue.cpp"],
)
cc_binary(
    name = "template_template",
    srcs = ["template_template.cpp"],
)
cc_binary(
    name = "explicit",
    srcs = ["explicit.cpp"],
)
